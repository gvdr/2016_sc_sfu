library('ggplot2')
library('ggmap')
getwd()
warmStrains <- read.table('~/Desktop/worm_strains.csv', header = TRUE, sep = ',')
wormStrains <- read.table('~/Desktop/worm_strains.csv', header = TRUE, sep = ',')
head(wormStrains)
location1 <- 'Adelaide, Australia'
geocode("Adelaide, Australia")
AB1_location <- c(lon=138.6, lat=-34.92862)
map1 <- get_map(location = location1, source = 'stamen', maptype = 'watercolor', crop=FALSE)
ggmap(map1)
map2 <- get_map(location = location1, source = 'google', maptype = 'terrain', crop=FALSE, zoom=3)
ggmap(map2)
map2 <- get_map(location = location1, source = 'google', maptype = 'terrain', crop=FALSE, zoom=6)
ggmap(map2)
map2 <- get_map(location = location1, source = 'google', maptype = 'terrain', crop=FALSE, zoom=6, color='bw')
ggmap(map2)
europeMap <- get_map(location = 'Europe', source = 'google', maptype = 'terrain', color = 'bw', zoom=3)
ggmap(europeMap)
wormStrains$location <- as.character(wormStrains$location)
wormStrains$lon <- geocode(wormStrains$location)[1]
wormStrains$lat <- geocode(wormStrains$location)[2]
ggmap(europeMap)+geom_point(data=wormStrains,aes(x=lon,y=lat))
wormStrains$lon
str(wormStrains$lon)
ggmap(europeMap)+geom_point(data=wormStrains,aes(x=lon,y=lat))
ggmap(europeMap)+geom_point(data=wormStrains,aes(x=lon,y=lat))
ggmap(europeMap)+ggplot(data=wormStrains,aes(x=lon,y=lat))+geom_point()
ggmap(europeMap)+geom_point(data=wormStrains,aes(x=lon,y=lat))
ggmap(europeMap)+geom_point(data=wormStrains,aes(x=lon,y=lat),alpha=0.3)
savehistory("~/Untitled.Rhistory")
library('ggplot2')
ger <- read.table(text="lon lat
6.585863 51.09021
8.682127 50.11092
7.460367 51.52755", header = TRUE, strip.white = TRUE)
mean(ger$lon) # outcome: 7.576119
mean(ger$lat) # outcome: 50.90956
library(ggmap)
mapImageData <- get_googlemap(center = c(lon = 7.576119, lat = 50.90956), zoom=8)
ggmap(mapImageData) +
geom_point(data=ger, aes(x=lon, y=lat), colour="red", size=6, alpha=.6)
library(ggplot2)
library(ggmap)
universities <- read.table(text="lon lat
-123.2531 49.2611
-122.9199 49.2781
-119.3963 49.9396", header = TRUE, strip.white = TRUE)
universities
mean(universities$lon)
mean(universities$lat)
province <- 'Vancouver BC'
map <- get_map(location = province, source = 'stamen', maptype = 'watercolor', crop = FALSE)
ggmap(map)
map <- get_map(location = province, source = 'stamen', maptype = 'watercolor')
ggmap(map)
map <- get_map(location = province, source = 'google', maptype = 'terrain', crop = FALSE)
ggmap(map)
map <- get_map(location = province, source = 'google', maptype = 'terrain', crop = FALSE, zoom=5)
ggmap(map)
map <- get_map(location = province, source = 'google', maptype = 'terrain', crop = FALSE, zoom=6)
ggmap(map)
map <- get_map(location = province, source = 'google', maptype = 'terrain', crop = FALSE, zoom=6, center=c(lon=-121,lat=51))
mapImageData <- get_googlemap(center = c(lon = -121, lat = 51), zoom=6)
ggmap(mapImageData)
install.packages('leaflet')
library(leaflet)
m<-leaflet()
m<-leaflet() %>%
addTiles() %>%
addMarkers(lng=174,lat=-36,popup = 'abc')
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
addMarkers(icon = Vancouver)
6.9/5.6
??install.packages
library(leaflet)
library(shiny)
install.packages('shiny')
library(shiny)
install.packages('leaflet')
install.packages("leaflet")
sqrt(32)
gapminder <- read.table(file='fiveYearData.csv', header=TRUE, sep=',')   # sep='\t' for TSV data
x <- c(1,2,3)
x <- c(1,2,3)
x <- c(1,2,3)
x
1<2
1==2
ls()
1==2
1<2
1==2
ls(all.names=TRUE)
ls()
.Random.seed
length(.Random.seed)
class(.Random.seed)
installed.packages()
?class
class(1:10)
typeof(1:10)
help("is.integer")
help(is.integer)
is.integer(1)
is.integer(1:3)
is.integer(1)
is.integer(1:1)
a
a<-11:20
a
a[3:5]
names(a[3:5])
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
x
?c
x <- data.frame(id = c('a', 'b', 'c', 'd', 'e', 'f'), x = 1:6, y = c(214:219))
x
rownames(x)
rownames(x)=c('a1','a2','a3','a4','a5','a6')
x
x <- 1:50
x
[x <- 1:50]
(x <- 1:50)
x <- 11:20
x[3:5]
a <- 11:20
b <- a[3:5]
names(b) <- c('s','w','c')
b
class(b)
typeof(b)
str(b)
b
a <- matrix(1:50, ncol = 5, nrow = 10)
a
?transpose
??transpose
aperm(a)
?"matrix"
a <- matrix(1:50, ncol = 5, nrow = 10, byrow = TRUE)
a
x <- data.frame(name = c('Jane','Lilly','Mark','Oliver','Martha'), age = c(25,31,23,52,76), height =
c(177,163,190,179,163), weight = c(57,69,83,75,70), sex = c(f,f,m,m,f))
x
x <- data.frame(first = c('Jane','Lilly','Mark','Oliver','Martha'), age = c(25,31,23,52,76), height =
c(177,163,190,179,163), weight = c(57,69,83,75,70), sex = c(f,f,m,m,f))
x <- data.frame(id = c('a', 'b', 'c', 'd', 'e', 'f'), x = 1:6, y = c(214:219))
x <- data.frame(name = c('a', 'b', 'c', 'd', 'e', 'f'), x = 1:6, y = c(214:219))
x <- data.frame(name = c('a', 'b', 'c', 'd', 'e'), x = 1:5, y = c(215:219))
x <- data.frame(name = c('Jane','Lilly','Mark','Oliver','Martha'), x = 1:5, y = c(215:219))
firstNames = c('Jane','Lilly','Mark','Oliver','Martha')
x <- data.frame(name = firstNames)
x
nameCol = c('Jane','Lilly','Mark','Oliver','Martha')
ageCol = c(25,31,23,52,76)
heightCol = c(177,163,190,179,163)
weightCol = c(57,69,83,75,70)
sexCol = c(f,f,m,m,f)
sexCol = c('f','f','m','m','f')
x <- data.frame(name=nameCol, age=ageCol, height=heightCol, weight=weightCol, sex=sexCol)
x
x
workCol = c(yes,no,no,yes,yes)
workCol = c('yes','no','no','yes','yes')
x <- cbind(x,working=workCol)
x
x$name
class(x$name)
class(x$age)
is.integer(x$age)
is.double(x$age)
class(x$name)
str(x$name)
str(x$working)
class(x$working)
x$height
mean(x$height)
sd(x$height)
mean(x$weight)
sd(x$weight)
x
x$age
x$age<40
x[x$age<40,]
x[x$age<40]
x
x[x$age<40,]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')   # names(x) is a vector of names
x
names(x)
names(x)=='a'
which(names(x)=='a')
x[names(x)=='a'|names(x)=='b']   # same as previous line
f2c <- function(f) {(f-32)/1.8}
f2c(100)
c2f <- function(c) {c*1.8+32}
c2f(f2c(100))
c2f(f2c(55))
c2f(23)
nameCol = c('Jane','Lilly','Mark','Oliver','Martha')
ageCol = c(25,31,23,52,76)
heightCol = c(177,163,190,179,163)
weightCol = c(57,69,83,75,70)
sexCol = c('f','f','m','m','f')
x <- data.frame(name=nameCol, age=ageCol, height=heightCol, weight=weightCol, sex=sexCol)
x
workCol = c('yes','no','no','yes','yes')
data.frame(name=nameCol, working=workCol)
?str
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')   # names(x) is a vector of names
x
names(x)=='a'
which(names(x)=='a')
which(names(x)=='a'&names(x)=='b')
names(x)=='a'&names(x)=='b'
names(x)=='a'
names(x)=='a' | names(x)=='b'
which(names(x)=='a' | names(x)=='b')
?which
x[which(names(x)=='a' | names(x)=='b')]
x[(names(x)=='a' | names(x)=='b')]
x[names(x)=='a' | names(x)=='b']
x < 7
which(x<7)
x(which(x<7))
x[which(x<7)]
x[x<7]
a <- matrix(1:12, nrow=3, ncol=4)
a
b <- matrix(1:8, nrow=4, ncol=2)
b
b%*%a
a%*%b
values = c('good','fair','excellent','good','good','fair','good','bad','excellent','good')
lev = c('bad','fair','good','excellent')
values
str(values)
class(values)
x <- factor(values, levels=lev)
x
?factor
x <- factor(values)
x
y = 'yes'
n = 'no'
x <- factor(c(y,n,n,y,y))
x
str(x)
x <- data.frame(id = c('a', 'b', 'c', 'd', 'e', 'f'), x = 1:6, y = c(214:219))
length(x)
x <- vector("character", length = 10)
x
x <- vector("integer", length = 10)
x
x <- vector("double", length = 10)
x
b
b <- vector(length = 10)
b
!b
vector()
length(logical(10))
length(vector())
length(vector(10))
length(vector())
vector()
10+c(10,11,12)
c(1,2,3) + c(10,20,30)
c(1,2,3) + c(10,20,30,40)   # error: longer object length not a multiple of shorter object length
c(1,2,3) + c(10,20,30,100,200,300)   # will produce 11 22 33 101 202 303
all(c(1,2,3) > 1)   # FALSE, since all() returns TRUE if all elements are TRUE
c(1,2,3) > 1   # will return FALSE TRUE TRUE = this is a LOGICAL VECTOR
prod(1:4)
prod(1:100)
prod(1:1000)
prod(1:300)
prod(1:200)
prod(1:150)
sum(1/(1:100)^2)   # guess what this will do
sum(1/(1:1000)^2)   # guess what this will do
pi
pi^2/6
pi**2/6
sum(1/(1:1000)^2) - pi**2/6
c(c(1,2,3),4)
as.integer(1.2)
as.integer(1.99)
class(as.integer(1.99))
class(as.double(1))
as.numeric('a')
is.integer(1)
is.integer(1L)
?is.integer
is.integer(as.integer(1))
a=1
is.integer(a)
is.integer(1)
is.numeric(1)
is.double(1)
1:3
?L
a=1L
a
1L
380+300+460+100
library("shiny")
shiny::runExample("hello")
shiny::runExample("01_hello")
ui<-fluidPage()
server<-function(input,output)
{}
shinyAp(ui=ui,server=server)
shinyApp(ui=ui,server=server)
shinyApp(ui=ui,server=server)
library(shiny)
library(shiny)
ui <- fluidPage(
sliderInput(
"num", "Choose a number",
min = 0, max = 100,
value = 20)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(
"num", "Choose a number",
min = 0, max = 100,
value = 20)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(
"num", "Choose a number",
min = 0, max = 100,
value = 20)
)
server <- function(input, output) {}
input$num
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(
"num", "Choose a number",
min = 0, max = 100,
value = 20)
)
server <- function(input, output) {}
input$num
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(
"num", "Choose a number",
min = 0, max = 100,
value = 20)
)
server <- function(input, output) {
input$num
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(
"num", "Choose a number",
min = 0, max = 100,
value = 20)
)
server <- function(input, output) {
print(input$num)
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(
"num", "Choose a number",
min = 0, max = 100,
value = 20)
)
server <- function(input, output) {
observe({print(input$num)})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs), col = 'darkgray', border = 'white')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("obs", "Number of observations:", min = 10, max = 500, value = 100)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs), col = 'darkgray', border = 'white')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("obs", "Number of observations:", min = 10, max = 500, value = 100)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs), col = 'darkgray', border = 'white')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("obs", "Number of observations:", min = 10, max = 500, value = 100)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
}
ui <- basicPage(
h1("Title without tags$"),
tags$blockquote("But block quote requires tags$ because it is less common than h3, h1 or code"),
h3("H3 is fine without tags and so is code here"),
code("data.frame(a=1:10, b=1:10)")
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
observe({
txt <- paste("Value above is:", input$mytext)
# here I'm essentially writing a result to the text box
# called myresults
updateTextInput(session, "myresults", value=txt)
})
}
ui <-   basicPage(
h3("An example of an update* function"),
textInput("mytext", "Input goes here"),
textInput("myresults", "Results will be printed here", "Initial value")
)
shinyApp(ui = ui, server = server)
getwd()
setwd("~/Desktop/rfiles")
msd <- read.csv('MSDSubset-extracted-data.csv')
library(curl)
url <- 'http://kris.shaffermusic.com/media/MSDSubset-extracted-data.csv'
msd <- read.csv(curl(url = ))
msd <- read.csv(curl(url))
install.packages(curl)
install.packages("curl")
install.packages("curl")
library(curl)
url <- 'http://kris.shaffermusic.com/media/MSDSubset-extracted-data.csv'
msd <- read.csv(curl(url))
install.packages(readr)
install.packages('readr')
url
library(readr)
